<div class="container-fluid vh-100 d-flex align-items-center justify-content-center">
  <div class="row w-100 justify-content-center">
    <div class="col-md-6 col-lg-5">
      <div class="card shadow-lg">
        <div class="card-header bg-success text-white text-center py-4">
          <%= portal_inline_svg('company_logo.png', style: 'max-height: 80px;', class: "mb-3") %>
          <h3 class="mb-0">Set Your Permanent Password</h3>
          <p class="mb-0 small">Welcome, <%= @current_account.full_name || @current_account.login %>!</p>
        </div>
        
        <div class="card-body p-4">
          <div class="alert alert-warning mb-4">
            <i class="fas fa-key me-2"></i>
            <strong>Security Setup:</strong> Please create a strong password to secure your account.
          </div>

          <%= form_with url: { action: :change_password }, local: true, class: "needs-validation", novalidate: true do |form| %>
            
            <% unless @current_account.scratch&.include?('initial_password_setup') %>
            <div class="mb-3">
              <label for="old_password" class="form-label">
                <i class="fas fa-lock me-2"></i>Current Password
              </label>
              <%= form.password_field :old_password, 
                  class: "form-control form-control-lg", 
                  placeholder: "Enter your current password",
                  required: true %>
              <div class="invalid-feedback">
                Please provide your current password.
              </div>
            </div>
            <% end %>

            <div class="mb-3">
              <label for="new_password" class="form-label">
                <i class="fas fa-shield-alt me-2"></i>New Password
              </label>
              <%= form.password_field :new_password, 
                  class: "form-control form-control-lg", 
                  placeholder: "Create a strong password",
                  minlength: 8,
                  required: true,
                  id: "newPassword" %>
              <div class="invalid-feedback">
                Password must be at least 8 characters long.
              </div>
            </div>

            <div class="mb-3">
              <label for="confirm_password" class="form-label">
                <i class="fas fa-check-circle me-2"></i>Confirm Password
              </label>
              <%= form.password_field :confirm_password, 
                  class: "form-control form-control-lg", 
                  placeholder: "Confirm your new password",
                  required: true,
                  id: "confirmPassword" %>
              <div class="invalid-feedback" id="passwordMismatch">
                Passwords must match.
              </div>
            </div>

            <!-- Password Strength Indicator -->
            <div class="mb-3">
              <small class="form-text">Password strength:</small>
              <div class="progress" style="height: 5px;">
                <div class="progress-bar" role="progressbar" id="passwordStrength" style="width: 0%"></div>
              </div>
              <small id="passwordStrengthText" class="form-text text-muted">Enter a password</small>
            </div>

            <!-- Password Requirements -->
            <div class="mb-4">
              <small class="form-text text-muted">
                <i class="fas fa-info-circle me-2"></i>Password requirements:
                <ul class="mb-0 mt-1">
                  <li>At least 8 characters long</li>
                  <li>Mix of letters and numbers recommended</li>
                  <li>Avoid using personal information</li>
                </ul>
              </small>
            </div>

            <div class="d-grid gap-2">
              <%= form.submit "Set Password & Continue", 
                  class: "btn btn-success btn-lg",
                  id: "submitBtn" %>
            </div>
          <% end %>

          <div class="text-center mt-4">
            <small class="text-muted">
              Once set, you'll be redirected to the main portal
            </small>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Password validation and strength indicator
(function() {
  'use strict';
  
  const newPassword = document.getElementById('newPassword');
  const confirmPassword = document.getElementById('confirmPassword');
  const strengthBar = document.getElementById('passwordStrength');
  const strengthText = document.getElementById('passwordStrengthText');
  const submitBtn = document.getElementById('submitBtn');

  function checkPasswordStrength(password) {
    let score = 0;
    let feedback = [];

    if (password.length >= 8) score += 1;
    else feedback.push('at least 8 characters');

    if (password.match(/[a-z]/)) score += 1;
    if (password.match(/[A-Z]/)) score += 1;
    if (password.match(/[0-9]/)) score += 1;
    if (password.match(/[^a-zA-Z0-9]/)) score += 1;

    return { score, feedback };
  }

  function updatePasswordStrength() {
    const password = newPassword.value;
    const { score, feedback } = checkPasswordStrength(password);
    
    const percentage = (score / 5) * 100;
    strengthBar.style.width = percentage + '%';
    
    if (score <= 2) {
      strengthBar.className = 'progress-bar bg-danger';
      strengthText.textContent = 'Weak password';
      strengthText.className = 'form-text text-danger';
    } else if (score <= 3) {
      strengthBar.className = 'progress-bar bg-warning';
      strengthText.textContent = 'Fair password';
      strengthText.className = 'form-text text-warning';
    } else if (score <= 4) {
      strengthBar.className = 'progress-bar bg-info';
      strengthText.textContent = 'Good password';
      strengthText.className = 'form-text text-info';
    } else {
      strengthBar.className = 'progress-bar bg-success';
      strengthText.textContent = 'Strong password';
      strengthText.className = 'form-text text-success';
    }
  }

  function validatePasswordMatch() {
    if (confirmPassword.value && newPassword.value !== confirmPassword.value) {
      confirmPassword.setCustomValidity('Passwords do not match');
    } else {
      confirmPassword.setCustomValidity('');
    }
  }

  newPassword.addEventListener('input', function() {
    updatePasswordStrength();
    validatePasswordMatch();
  });

  confirmPassword.addEventListener('input', validatePasswordMatch);

  // Bootstrap form validation
  window.addEventListener('load', function() {
    var forms = document.getElementsByClassName('needs-validation');
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        validatePasswordMatch();
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();
</script>